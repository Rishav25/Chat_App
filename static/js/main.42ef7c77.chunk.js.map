{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","htmlFor","PictureOutlined","type","multiple","id","style","display","files","bind","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","usern","localStorage","getItem","logout","clear","window","location","reload","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","onClick","LoginForm","setUsername","password","setPassword","error","setError","a","authObject","axios","get","headers","setItem","e","required","align","App","projectID","userSecret","renderChatFeed","chatAppProps","onNewMessage","Audio","play","renderIsTyping","typers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42ef7c77.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport {sendMessage} from 'react-chat-engine';\r\nimport {SendOutlined , PictureOutlined} from '@ant-design/icons';\r\n\r\nconst MessageForm =(props) =>{\r\n    const [value,setValue] = useState('');  //using state to type in some message\r\n    const {chatId,creds} = props;\r\n    \r\n    const handleChange=(event) =>{\r\n        setValue(event.target.value);   //this is where value of input is stored\r\n\r\n    }\r\n    \r\n    const handleSubmit =(event) =>{\r\n        event.preventDefault();         //on submission by default browser refeshes\r\n        //we have to prevent that\r\n        const text = value.trim();      //trim removes leading and trailing white space\r\n        \r\n        if(text.length > 0)\r\n            sendMessage(creds,chatId,{text});\r\n        \r\n            setValue('');               //this makes the form empty after entry\r\n    }\r\n\r\n    const handleUpload=(event) =>{\r\n        sendMessage(creds, chatId , {files: event.target.files ,text:''})\r\n    }\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"message-input\"\r\n                placeholder=\"Send a message...\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined  className=\"pictue-icon\"/>\r\n                </span>\r\n            </label>\r\n            <input \r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{display:'none'}}\r\n                onChange={handleUpload.bind(this)}\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\" />\r\n            </button>\r\n        </form>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default MessageForm;","const MyMessage =({message}) =>{\r\n    if(message.attachments && message?.attachments?.length >0) //checking if message is a picture or text\r\n    {\r\n        return (\r\n            <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{float:'right'}}\r\n                />\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"message\" style={{float:'right',marginRight:'18px',color:'white',backgroundColor:'#3B2A50'}}>\r\n            {message.text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyMessage;","const TheirMessage =({lastMessage,message}) =>{\r\n    const isFirstMessageByUser =! lastMessage || lastMessage.sender.username !== message.sender.username\r\n    //checking if a message is first message by that user\r\n    return (\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div\r\n                    className=\"message-avatar\"\r\n                    style={{backgroundImage: message.sender && `url(${message.sender.avatar})`}}\r\n                    />\r\n            )}\r\n            {/*We check for all other messages like we did in MyMessage\r\n                first we check if it is an image, if an image we paste the image\r\n                code from mymessage and if not a message we put the message\r\n                text in the div\r\n            */}\r\n            \r\n                {message.attachments && message?.attachments?.length >0 //checking if message is a picture or text\r\n                    ?(\r\n                        <img\r\n                            src={message.attachments[0].file}\r\n                            alt=\"message-attachment\"\r\n                            className=\"message-image\"\r\n                            style={{marginLeft : isFirstMessageByUser? '4px' : '48px'}}\r\n                        />\r\n                    ) \r\n                    :(\r\n                        <div className=\"message\" style={{float:'left',backgroundColor:'#CABCDC',marginLeft : isFirstMessageByUser? '4px' : '48px'}}>\r\n                                {message.text}\r\n                        </div>\r\n                    )\r\n                }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TheirMessage;","/* eslint-disable no-undef */\r\nimport MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\n\r\nconst usern = localStorage.getItem('username');\r\nconst logout =()=>{\r\n    localStorage.clear();\r\n    window.location.reload();\r\n}\r\n\r\nconst ChatFeed = (props) => { \r\n    const {chats,activeChat,userName,messages}=props;\r\n    const chat = chats && chats[activeChat];    //if chats exist find active chat\r\n\r\n    const renderReadReceipts =(message,isMyMessage) => chat.people.map((person,index) => person.last_read === message.id && (  \r\n        //if the person has got the messages then we do the following\r\n            <div\r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\r\n                }}\r\n            />\r\n        ));\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key,index) =>{\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index-1];\r\n            const isMyMessage = userName === message.sender.username;\r\n            \r\n            return (\r\n                <div key={`msg_${index}`} style={{width : '100%'}}>\r\n                \r\n                <div className=\"message-block\">\r\n                {\r\n                    isMyMessage\r\n                    ? <MyMessage message={message}/>      \r\n                    : <TheirMessage message={message} lastMessage={messages[lastMessageKey]}/>\r\n                }\r\n                </div>\r\n                <div className = \"read-receipts\" style={{marginRight: isMyMessage ? '18px' : '0px' , marginLeft : isMyMessage ? '0px' : '68px'}}>\r\n                    {renderReadReceipts(message,isMyMessage)}\r\n                </div>\r\n                </div>\r\n                \r\n            );\r\n        });\r\n    };\r\n\r\n    if(!chat)\r\n        return 'Wait a second...';\r\n    \r\n        \r\n\r\n    return(\r\n        <ScrollToBottom className=\"chat-feed\"> \r\n                <div className=\"chat-title-container\">\r\n                    <div className=\"chat-title\">\r\n                        {chat.title}\r\n                    </div>\r\n                    <div className=\"chat-subtitle\">\r\n                        {chat.people.map((person)=> `${person.person.username} `)}\r\n                    </div>\r\n                </div>\r\n                {renderMessages()}\r\n                <div style={{height :'100px'}} />\r\n                <div className=\"message-form-container\">   {/*This is the place where we type the message*/ } \r\n                    <MessageForm {...props} chatId={activeChat} />\r\n                </div>\r\n                <div>\r\n                    <button className=\"logout\" onClick={logout}>Logout {usern}</button>\r\n                </div>\r\n        </ScrollToBottom>\r\n    );\r\n\r\n};\r\n\r\nexport default ChatFeed; ","//this is the form where people will be entering their\r\n//username and password\r\n\r\nimport {useState} from 'react';\r\nimport axios from 'axios';  //making an api call\r\n\r\nconst projectID = 'c401ec20-0d9e-41ff-a218-415b0047f5e9';\r\n\r\nconst LoginForm =() =>{\r\n    const [username,setUsername] =useState('');\r\n    const [password,setPassword] =useState('');\r\n    const [error,setError] =useState('');\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        //after entering username and password we should get back the \r\n        //messages\r\n        //if we cant get back the messages then return error message\r\n        const authObject ={'Project-ID':projectID,'User-Name':username,'User-Secret':password}\r\n\r\n        try{\r\n            //enter username | password\r\n            await axios.get('https://api.chatengine.io/chats',{headers:authObject});\r\n            localStorage.setItem('username',username);\r\n            localStorage.setItem('password',password);\r\n            window.location.reload();\r\n            setError('');\r\n            //we have this reload statement here because if we are not\r\n            //logged in then we should get the login screen and not the cht engine\r\n            //this is making an api call\r\n            //works out -> logged in\r\n            //if logged in we should save it for every time\r\n        }catch(err){\r\n            setError('Username or Password is incorrect');\r\n        }\r\n\r\n    };\r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">WELCOME</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} onChange={(e) =>setUsername(e.target.value)}\r\n                    className=\"input\" placeholder=\"Username\" required/>\r\n                    {/*the username state is stored in e and in the nest line password is stored in e*/}\r\n                    <input type=\"password\" value={password} onChange={(e) =>setPassword(e.target.value)}\r\n                    className=\"input\" placeholder=\"Password\" required/>\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Login</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\nexport default LoginForm;","import {ChatEngine} from 'react-chat-engine';\r\nimport ChatFeed from './components/ChatFeed';\r\nimport LoginForm from './components/LoginForm';\r\nimport './App.css';\r\n\r\nconst projectID='c401ec20-0d9e-41ff-a218-415b0047f5e9';\r\n\r\n\r\nconst App = () => {\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n    //If there is no username stored then we return the loginform\r\n\r\n    return(\r\n        <ChatEngine\r\n            height=\"100vh\"\r\n            projectID={projectID}\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\r\n            onNewMessage={() => new Audio('https://chat-engine-assets.s3.amazonaws.com/click.mp3').play()}\r\n            renderIsTyping={(typers)=>{}}\r\n        />\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}